<?php
/** CacheableDatabase class */

namespace smtech\GradingAnalytics\Snapshots;

use mysqli;
use smtech\ReflexiveCanvasLTI\Toolbox;
use smtech\GradingAnalytics\Snapshots\Exception\SnapshotException;
use Battis\HierarchicalSimpleCache;

/**
 * An object that has access to a MySQL database and a cache.
 *
 * @author Seth Battis <SethBattis@stmarksschool.org>
 */
class CacheableDatabase
{
    /**
     * MySQL database access
     * @var mysqli
     */
    protected $sql;

    /**
     * Caching for queried data
     * @var HierarchicalSimpleCache
     */
    protected $cache;

    /**
     * Construct a CacheableDatabase object
     *
     * Note that the cache is instantiated just in time, and will not be created
     * until its first use.
     *
     * @param mysqli|Toolbox|CacheableDatabase $databaseProvider An object
     *        containing a mysqli object that can be reused
     *
     * @throws SnapshotException `SnapshotException::MYSQL` If a valid mysqli
     *         database object cannot be extracted from the `$databaseProvider`
     */
    public function __construct($databaseProvider)
    {
        $this->sql = false;
        if (is_a($databaseProvider, mysqli::class)) {
            $this->sql = $databaseProvider;
        } elseif (is_a($databaseProvider, CacheableDatabase::class)) {
            $this->sql = $databaseProvider->sql;
        } elseif (is_a($databaseProvider, Toolbox::class)) {
            $this->sql = $databaseProvider->getMySql();
        }

        if (!is_a($this->sql, mysqli::class)) {
            throw new SnapshotException(
                'Database provider not recognized (instance of ' . (is_object($databaseProvider) ?
                        get_class($databaseProvider) :
                        gettype($databaseProvider)
                    ) .')',
                SnapshotException::MYSQL
            );
        }
    }

    /**
     * MySQL access
     *
     * @return mysqli
     */
    protected function getMySql()
    {
        return $this->sql;
    }

    /**
     * Cache access
     *
     * @return HierarchicalSimpleCache
     */
    protected function getCache()
    {
        if (empty($this->cache)) {
            $this->cache = new HierarchicalSimpleCache(
                $this->getMySql(),
                get_class($this),
                true
            );
        }
        return $this->cache;
    }
}

